package com.enterprisesolutions.controller;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


//import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import com.enterprisesolutions.display.UcDisplayObject;
import com.enterprisesolutions.hibernate.model.CustMst;
import com.enterprisesolutions.hibernate.model.OutputMst;
import com.enterprisesolutions.hibernate.model.SystemMst;
import com.enterprisesolutions.hibernate.model.UcDet;
import com.enterprisesolutions.hibernate.model.UcMst;
import com.enterprisesolutions.hibernate.model.UcParent;
import com.enterprisesolutions.hibernate.model.UcParentPK;
import com.enterprisesolutions.navigation.NavItem;
import com.enterprisesolutions.navigation.NavObject;
import com.enterprisesolutions.utils.AppConstants;
import com.enterprisesolutions.utils.AppUtil;
import com.enterprisesolutions.utils.ConverterUtil;
import com.enterprisesolutions.utils.DbUtil;



public class UcController implements Controller{
	private static String ADD_AND_DIAPLAY_ACTION = "add_and_display_action";
	private static String DISPLAY_UC_ACTION="display_uc_action";
	private static String PROPERTIES_UPDATE_ACTION = "properties_update_action";
	private static String EXPAND_TREE_NODE_ACTION = "expand_tree_node";
	private static String CLOSE_TREE_NODE_ACTION = "close_tree_node";	
	private static String DEFAULT_ACTION = "default_action";
	private static String CUSTOMER = "CUSTOMER";
	private static String PROCESS = "PROCESS";
	private static String DEFAULT_UC_NAME = "Update use case name..";
	private static String DEFAULT_OBJ_NAME = "Update object name..";
	private static String[] OBJ_TYPE_LIST = { "CUSTOMER", "CONNECTOR",
			"REPORT", "PROCESS" };

	private static String USE_CASE_SELECT_ERROR = "Please select a use case to display...";
	private static String INVALID_OBJECT_TYPE_ERROR = "Please select a valide object to create for the use case...";



	@Autowired
	ConverterUtil converterUtil;
	
	@Autowired
	DbUtil dbUtil;
	
	@Autowired
	NavObject navObject;

	@Autowired
	AppUtil appUtil;


	
	@SuppressWarnings("rawtypes")
	public ModelAndView handleRequest(HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) throws Exception {
		
		//get session
		
		HttpSession userSession = httpServletRequest.getSession();
		List<NavItem> navList=(List<NavItem>)userSession.getAttribute("nav");
		// Level, parentList(this is the list of parents expanded for that level)

		
		System.out.println("-------xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxCONTEXT_PATH="+httpServletRequest.getContextPath());
		
		//setting context path
		
		
		String contextPath = "";
		java.net.InetAddress inetAddress = java.net.InetAddress.getLocalHost();
		String hostFullName = inetAddress.getHostName();
		String[] hostArray = hostFullName.split("\\.");
		String host = hostFullName;
		if ((hostArray != null) && (hostArray.length > 0)) {
			host = hostArray[0];
			contextPath = httpServletRequest.getScheme()
				+ "://" + host + ":"
				+ httpServletRequest.getServerPort()
				+ httpServletRequest.getContextPath();
		}
		
		
		//End setting context path
		
		Enumeration<String> attr = httpServletRequest.getAttributeNames();
		while (attr.hasMoreElements()) {
			String x = attr.nextElement();
//			System.out.println("-------attr-------x=" + x);
//			System.out.println("-----attr----value-----x="
//					+ httpServletRequest.getAttribute(x));

		}

		Enumeration<String> para = httpServletRequest.getParameterNames();
		while (para.hasMoreElements()) {
			String x = para.nextElement();
//			System.out.println("-------para-------x=" + x);
//			System.out.println("-----para----value-----x="
//					+ httpServletRequest.getParameter(x));

		}
		// declare input param variables

		String user_request_action_param = null;
		// uc_mst
		String uc_id_param = null;
		// uc_parent
		String cust_id_param = null;
		String system_id_param = null;
		String output_id_param=null;
		String output_type_param=null;
		String output_name_param=null;
		BigInteger custIdParam = null;
		BigInteger systemIdParam=null;
		// declare all other variables

//		Map<String, Object> ucMstAndLinkedObjMap = null;
		Map<String, Object> modelUc = new HashMap<String, Object>();
		List<OutputMst> outputMstList = null;
//		JSONObject obj=new JSONObject();

		if (httpServletRequest != null) {
			user_request_action_param = httpServletRequest
					.getParameter("user_request_action_param");

			cust_id_param = httpServletRequest.getParameter("cust_id_param");
			system_id_param = httpServletRequest.getParameter("system_id_param");
			custIdParam = converterUtil.convertStringToBigInteger(httpServletRequest.getParameter("cust_id_param"));
			systemIdParam = converterUtil.convertStringToBigInteger(httpServletRequest.getParameter("system_id_param"));
			uc_id_param = httpServletRequest.getParameter("uc_id_param");

			output_id_param = httpServletRequest.getParameter("output_id_param");
			
			output_type_param = httpServletRequest.getParameter("output_type_param");
		}

		// validate input params
		Map<String, Object>  outputObjMap = validateParams(user_request_action_param, systemIdParam, custIdParam,
				uc_id_param, output_id_param, output_type_param, output_name_param);
//		System.out.println("-------01-------------------------" );
		NavItem inputNavItem= (NavItem) outputObjMap.get("navItem");
		CustMst custMst=null;
		SystemMst systemMst=null;

		List<List<UcDisplayObject>> ucDisplayDataRowList=null;
		// DEFAULT get all root use cases
		if (outputObjMap.get("userRequestAction")
				.equals(DEFAULT_ACTION)) {
			// query DB
//			ucMstList = dbUtil.queryUcMstByParentId(null);
			
		} else if (outputObjMap.get("userRequestAction").equals(
				ADD_AND_DIAPLAY_ACTION)) {
			
			//add output 

			OutputMst outputMst= (OutputMst) outputObjMap.get("outputMst");
			BigDecimal outputId=dbUtil.createNewOutputMst(outputMst);
			
			//Query outputMst
			outputMstList= dbUtil.queryOutputMstByUcId(outputMst.getUcId()); 
			
			
			//get SystemMst for this UC
			systemMst= (SystemMst) outputObjMap.get("systemMst");
			//The above SystemMst does not contain name etc so getting it from Map
			systemMst= navObject.getSystemMap().get(systemMst.getSystemId());
			
			//get SystemMst for this UC
			custMst= (CustMst) outputObjMap.get("custMst");
			custMst= navObject.getCustMap().get(custMst.getCustId());
			
			//Get the selected UC from NavList
			BigInteger bigIntUcId=null;
			bigIntUcId=converterUtil
					.convertBigDecimalToBigInteger(inputNavItem.getUcMst().getUcId());
			int inputNavItemIndex = appUtil.getIndexOfUc(navList, bigIntUcId, systemIdParam, custIdParam);
			
			if(inputNavItemIndex>-1 && inputNavItemIndex<navList.size()){
				inputNavItem= navList.get(inputNavItemIndex);
			}

			//Generate DisplayData
			
			ucDisplayDataRowList= appUtil.generateUCDisplayData(custMst, inputNavItem, outputMstList);

			
		} else if (outputObjMap.get("userRequestAction").equals(DISPLAY_UC_ACTION)) {

			//Query outputMst
			OutputMst outputMst= (OutputMst) outputObjMap.get("outputMst");
			outputMstList= dbUtil.queryOutputMstByUcId(outputMst.getUcId()); 		
			
			//get SystemMst for this UC
			systemMst= (SystemMst) outputObjMap.get("systemMst");
			//The above SystemMst does not contain name etc so getting it from Map
			systemMst= navObject.getSystemMap().get(systemMst.getSystemId());
			
			//get SystemMst for this UC
			custMst= (CustMst) outputObjMap.get("custMst");
			custMst= navObject.getCustMap().get(custMst.getCustId());
			
			//Get the selected UC from NavList
			BigInteger bigIntUcId=null;
			bigIntUcId=converterUtil
					.convertBigDecimalToBigInteger(inputNavItem.getUcMst().getUcId());
			int inputNavItemIndex = appUtil.getIndexOfUc(navList, bigIntUcId, systemIdParam, custIdParam);
			if(inputNavItemIndex>-1 && inputNavItemIndex < navList.size()){
				inputNavItem= navList.get(inputNavItemIndex);
			}			
			//Generate DisplayData
			
			ucDisplayDataRowList= appUtil.generateUCDisplayData(custMst, inputNavItem, outputMstList);


		}// end ACTION check
		
		userSession.setAttribute("selectedUc",inputNavItem);
		
		modelUc.put("userRequestAction",
				(String) outputObjMap.get("userRequestAction"));
		modelUc.put("outputMstList", (ArrayList) outputMstList);
		modelUc.put("menuList", (List<UcDisplayObject>)appUtil.getMenuListForAll());
		modelUc.put("ucDisplayDataRowList", (List<List<UcDisplayObject>> )ucDisplayDataRowList);
		modelUc.put("custMst", custMst);
	//	modelUc.put("ucDisplayObjectsEnum", UcDisplayObjectsEnum);
		modelUc.put("systemMst", systemMst);		
		modelUc.put("CONTEXT_PATH", httpServletRequest.getContextPath());
		return new ModelAndView("/jsp/UseCase.jsp", "modelUc", modelUc);

	}



	private Map<String, Object> validateParams(String user_request_action_param,
			BigInteger systemIdParam, BigInteger custIdParam,
			String uc_id_param, String output_id_param, String output_type_param, String output_name_param) throws Exception {

		Map<String, Object> outputObjMap = new HashMap<String, Object>();
		NavItem navItem = new NavItem();
		
		SystemMst systemMst = new SystemMst();
		CustMst custMst = new CustMst();
		UcMst ucMst = new UcMst();
		UcParent ucParent = new UcParent();
		UcParentPK ucParentPK = new UcParentPK();
//		List<OutputMst> outputMstList = new ArrayList<OutputMst>();
		OutputMst outputMst= new OutputMst();
		String userRequestAction = user_request_action_param;

		// assiging DEFAULT_ACTION, which will be to display message select a use case from nav
		if (user_request_action_param == null) {
			userRequestAction = DEFAULT_ACTION;
		} else if (user_request_action_param.equals(ADD_AND_DIAPLAY_ACTION)) {
			if (uc_id_param == null
					|| (converterUtil.convertStringToBigDecimal(uc_id_param)
							.intValue() == 0)) {

				// setting UcMst to add
			}
			if (output_type_param != null) {
				outputMst.setOutputType(output_type_param);
			} 
			outputMst.setUcId(converterUtil.convertStringToBigInteger(uc_id_param));
			
			systemMst.setSystemId(converterUtil.convertBigIntegerToBigDecimal(systemIdParam));
			custMst.setCustId(converterUtil.convertBigIntegerToBigDecimal(custIdParam));
			
			ucMst.setUcId(converterUtil.convertStringToBigDecimal(uc_id_param));
			
			ucParentPK.setSystemId(systemIdParam);
			ucParentPK.setCustId(custIdParam);
			ucParentPK.setUcId(converterUtil.convertStringToBigInteger(uc_id_param));
			ucParent.setUcParentPK(ucParentPK);
			
		}else if(user_request_action_param.equals(DISPLAY_UC_ACTION)){
			systemMst.setSystemId(converterUtil.convertBigIntegerToBigDecimal(systemIdParam));
			custMst.setCustId(converterUtil.convertBigIntegerToBigDecimal(custIdParam));
			
			ucParentPK.setSystemId(systemIdParam);
			ucParentPK.setCustId(custIdParam);
			ucParentPK.setUcId(converterUtil.convertStringToBigInteger(uc_id_param));
			ucParent.setUcParentPK(ucParentPK);
			
			ucMst.setUcId(converterUtil.convertStringToBigDecimal(uc_id_param));
			
			outputMst.setOutputId(converterUtil.convertStringToBigDecimal(output_id_param));
			outputMst.setOutputType(output_type_param);
			outputMst.setOutputName(output_name_param);
			outputMst.setUcId(converterUtil.convertStringToBigInteger(uc_id_param));
		}// end ACTION check
		navItem.setUcMst(ucMst);
		navItem.setUcParent(ucParent);
//		System.out.println("-------03-------------------------=" );
		// populate map
		outputObjMap.put("userRequestAction", userRequestAction);
		outputObjMap.put("navItem", navItem);
		outputObjMap.put("outputMst", outputMst);
		outputObjMap.put("systemMst", systemMst);
		outputObjMap.put("custMst", custMst);		
		return outputObjMap;

	}// end validateParams

}
